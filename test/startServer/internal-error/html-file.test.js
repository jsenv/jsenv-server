/**

This test is meant to work like this:

It reads the html files generated by ./generate-internal-error-html-files.js
and ensure regenerating them gives the same output.
The goal is to force dev to regenerate the html files and ensure they looks correct
with a human eye verification before commiting anything that would change them.

-> This is snapshot testing to force a human review when internal error html is modified.

*/

import { readFile, resolveUrl, readDirectory } from "@jsenv/util"
import { assert } from "@jsenv/assert"

const readHtmlFiles = async () => {
  const htmlFilesDirectory = resolveUrl("./html-files/", import.meta.url)
  const htmlFilenames = await readDirectory(htmlFilesDirectory)

  const htmlFiles = {}
  htmlFilenames.forEach(() => {
    // to ensure order is predictable
    htmlFiles[htmlFilenames] = null
  })
  await Promise.all(
    htmlFilenames.map(async (htmlFilename) => {
      const htmlFileUrl = resolveUrl(htmlFilename, htmlFilesDirectory)
      htmlFiles[htmlFilename] = await readFile(htmlFileUrl)
    }),
  )
  return htmlFiles
}

// disable on windows because it would fails due to line endings (CRLF)
if (process.platform !== "win32") {
  const expected = await readHtmlFiles()
  await import("./generate-internal-error-html-files.js")
  const actual = await readHtmlFiles()
  assert({ actual, expected })
}
